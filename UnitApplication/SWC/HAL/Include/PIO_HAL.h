#ifndef PIO_HAL_H
#define PIO_HAL_H

#include "hardware/pio.h"

/* LED Blink on GPIO16 Example Code - can be used for testing or as a reference */
#if 0
    Step 1: Create a PIO program using the PIO assembler. For example create blink.pio file and write the following code:
    .program blink
        pull block          ; Pull from FIFO to OSR (blocking)
        mov x, osr         ; Copy OSR to X scratch register
    .wrap_target
        set pins, 1        ; Turn LED on
        mov y, x           ; Initialize Y delay counter from X
    delay_on:
        jmp y--, delay_on  ; Delay for (X + 1) cycles
        set pins, 0        ; Turn LED off
        mov y, x          ; Reset Y delay counter
    delay_off:
        jmp y--, delay_off ; Delay for (X + 1) cycles
    .wrap                  ; Loop forever

    Step 2: Add the following to CMakeLists.txt to compile the PIO program:

    pico_generate_pio_header(moduri ${CMAKE_CURRENT_LIST_DIR}/blink.pio)

    Step 3: Include the generated header file in your C code and use the PIO_HAL API to run the program (for example in the main() function):

    #include "PIO_HAL.h"
    #include "blink.pio.h"  // This will be generated automatically by the PIO assembler

    const uint LED_PIN = 16;
    
    PIO_HAL_Config_t config = 
    {
        .pio_instance = pio0,       //Choose PIO instance - RP2350 has 3 Ã— Programmable IO (PIO) blocks, each with 4 state machines (12 SMs total)
        .state_machine_num = 0,     //Select state machine number in the PIO instance (here we choose the first one out of 4)
        .program = &blink_program,  //Program instructions (generated by the PIO assembler from the .pio file provided by the user)
        .program_length = blink_program.length,         //Number of instructions in the program
        .clock_div = clock_get_hz(clk_sys) / 2000.0f,   //Set the clock divider
        .pin_base = LED_PIN,                                //GPIO pin number to use
        .pin_count = 1,                                     //Number of pins to use
        .set_pins_as_output = true,                         //Set pins as output
        .default_config = blink_program_get_default_config  //Function pointer to get the default configuration for the PIO program (will be generated by the PIO assembler)
    };

    if (PIO_SetupAndRun(&config) != PIO_HAL_OK) 
    {
        printf("PIO failed!\n");
        while(1);
    }

    while (true) 
    {
        sleep_ms(1000);
    }

#endif
typedef enum 
{
    PIO_HAL_OK = 0,
    PIO_HAL_ERROR_INVALID_PARAM,
    PIO_HAL_ERROR_PROGRAM_TOO_LARGE,
    PIO_HAL_ERROR_NO_FREE_SM,
    PIO_HAL_ERROR_GPIO_IN_USE
} PIO_HAL_Status_t;

typedef struct 
{
    PIO pio_instance;               // PIO instance (pio0/pio1)
    uint state_machine_num;         // State machine number
    const pio_program_t *program;   // Program instructions
    uint program_length;            // Number of instructions
    uint program_offset;            // Program offset in instruction memory
    float clock_div;                // Clock divider
    uint pin_base;                  // Base pin number
    uint pin_count;                 // Number of pins
    bool set_pins_as_output;        // Configure pins as outputs
    pio_sm_config (*default_config)(uint offset);  // Function pointer for default configuration
} PIO_HAL_Config_t;


PIO_HAL_Status_t PIO_SetupAndRun(PIO_HAL_Config_t *PIO_config);

#endif // PIO_HAL_H